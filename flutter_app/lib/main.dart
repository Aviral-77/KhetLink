import 'package:flutter/material.dart';
import 'package:amplify_flutter/amplify_flutter.dart';
import 'package:amplify_storage_s3/amplify_storage_s3.dart';
import 'package:my_app/screens/weather_screen.dart';
import 'package:my_app/screens/ndvi_monitoring_screen.dart';
import 'package:my_app/screens/carbon_calculator_screen.dart';
import 'package:my_app/screens/credit_verification_screen.dart';
import 'package:my_app/screens/login_screen.dart';
import 'package:my_app/screens/registration_screen.dart';
import 'package:my_app/screens/ai_analysis_screen.dart';
import 'package:my_app/report_generation_screen.dart';
import 'package:my_app/screens/marketplace_screen.dart';
import 'package:my_app/screens/my_farm_screen.dart';
import 'package:my_app/services/auth_service.dart';
import 'package:my_app/services/data_service.dart';
import 'package:my_app/map_my_farm.dart';
import 'package:my_app/screens/sell_screen.dart';

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await DataService().init();
  // Initialize Amplify (the actual config will be generated by the Amplify CLI and
  // placed into amplifyconfiguration.dart). If you haven't run `amplify init` and
  // `amplify add auth` + `amplify add storage`, the app will continue but storage
  // uploads will not work until Amplify is configured.
  await _configureAmplifyIfNeeded();
  runApp(const MyApp());
}

Future<void> _configureAmplifyIfNeeded() async {
  try {
    // Only configure once
    if (Amplify.isConfigured) return;
  Amplify.addPlugin(AmplifyStorageS3());
    // If amplifyconfiguration.dart exists in your lib folder, import it and use
    // Amplify.configure(amplifyconfig) here. Otherwise, Amplify.configure will
    // throw; we'll catch and print a helpful message.
    try {
      // ignore: avoid_dynamic_calls
      await Amplify.configure(''); // placeholder: replace with generated config
    } catch (e) {
      // amplifyconfiguration.dart not generated yet - it's okay for development
      // Run the Amplify CLI and then paste the generated config or import file.
      debugPrint('Amplify not configured. Run `amplify init` and add auth/storage then `amplify push`.');
    }
  } catch (e) {
    debugPrint('Error configuring Amplify: $e');
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      navigatorKey: navigatorKey,
      debugShowCheckedModeBanner: false,
      title: 'KhetLink Dashboard',
      theme: ThemeData(
        primarySwatch: Colors.green,
        scaffoldBackgroundColor: Colors.white,
      ),
      home: const AuthGate(),
      routes: {
        '/dashboard': (_) => const DashboardScreen(),
        '/sell': (_) => const SellScreen(),
      },
    );
  }
}

class AuthGate extends StatefulWidget {
  const AuthGate({super.key});

  @override
  State<AuthGate> createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
  bool _loading = true;
  bool _loggedIn = false;
  String _username = '';
  final AuthService _auth = AuthService();

  @override
  void initState() {
    super.initState();
    _check();
  }

  Future<void> _check() async {
    // Check local flag from shared_preferences
    try {
      final ok = await _auth.isAuthenticated();
      final uname = await _auth.username();
      setState(() { _loggedIn = ok; _username = uname ?? ''; _loading = false; });
    } catch (_) {
      setState(() { _loggedIn = false; _loading = false; });
    }
  }

  void _onLoginSuccess() {
    Navigator.of(context).pushReplacement(MaterialPageRoute(builder: (_) => DashboardScreen(username: null)));
  }

  void _showRegister() {
    Navigator.of(context).push(MaterialPageRoute(builder: (_) => RegistrationScreen(onRegistered: _onLoginSuccess, onShowLogin: () { Navigator.of(context).pop(); } )));
  }

  void _showLogin() {
    Navigator.of(context).push(MaterialPageRoute(builder: (_) => LoginScreen(onLoginSuccess: _onLoginSuccess, onShowRegister: _showRegister)));
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) return const Scaffold(body: Center(child: CircularProgressIndicator()));
  if (_loggedIn) return DashboardScreen(username: _username);
    // show welcome with options to login or register
    return Scaffold(
      appBar: AppBar(title: const Text('Welcome', style: TextStyle(color: Colors.black)), backgroundColor: Colors.white, elevation: 0, iconTheme: const IconThemeData(color: Colors.black)),
      body: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 640),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Card(
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(20.0),
                    child: Column(children: [
                      const Text('Welcome to KhetLink', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 12),
                      const Text('Please login or create an account to continue.'),
                      const SizedBox(height: 18),
                      Row(children: [
                        Expanded(child: ElevatedButton(onPressed: _showLogin, child: const Text('Login'))),
                        const SizedBox(width: 12),
                        Expanded(child: OutlinedButton(onPressed: _showRegister, child: const Text('Register'))),
                      ])
                    ]),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class DashboardScreen extends StatelessWidget {
  final String? username;
  const DashboardScreen({super.key, this.username});

  void _showCarbonCreditsDialog(BuildContext context) {
  showDialog(
    context: context,
    builder: (_) => AlertDialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      title: const Text('Carbon Credits MRV',
          style: TextStyle(fontWeight: FontWeight.bold)),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _CarbonOption(
            icon: Icons.bar_chart,
            label: "Monitor Satellite Data",
            onTap: () {
              Navigator.pop(context);
              Navigator.push(context,
                  MaterialPageRoute(builder: (_) => const CarbonCalculatorScreen()));
            },
          ),
          const SizedBox(height: 8),
          _CarbonOption(
            icon: Icons.file_copy_outlined,
            label: "Generate Reports",
            onTap: () {
              Navigator.pop(context);
              Navigator.push(context,
                  MaterialPageRoute(builder: (_) => ReportGenerationScreen()));
            },
          ),
          const SizedBox(height: 8),
          _CarbonOption(
            icon: Icons.verified_outlined,
            label: "Verify Credits",
            onTap: () {
              Navigator.pop(context);
              Navigator.push(context,
                  MaterialPageRoute(builder: (_) => CreditVerificationScreen()));
            },
          ),
        ],
      ),
    ),
  );
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        automaticallyImplyLeading: false,
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
                'Welcome, ${username ?? 'Farmer'}',
                style: const TextStyle(fontSize: 14, color: Colors.black54)),
            const SizedBox(height: 4),
            const Text("Wazidpur Division, Noida, Uttar Pradesh",
                style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.black)),
          ],
        ),
        actions: [
          const Icon(Icons.notifications_none, color: Colors.black87),
          const SizedBox(width: 12),
          PopupMenuButton<String>(
            icon: const Icon(Icons.person_outline, color: Colors.black87),
            onSelected: (v) async {
              if (v == 'logout') {
                final svc = AuthService();
                await svc.logout();
                Navigator.of(navigatorKey.currentContext ?? context).pushAndRemoveUntil(
                  MaterialPageRoute(builder: (_) => const AuthGate()),
                  (r) => false,
                );
              }
            },
            itemBuilder: (_) => [
              const PopupMenuItem(value: 'logout', child: Text('Logout')),
            ],
          ),
          const SizedBox(width: 12),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            // ---- Tools Section ----
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  "Tools",
                  style: Theme.of(context)
                      .textTheme
                      .titleMedium
                      ?.copyWith(fontWeight: FontWeight.bold),
                ),
              ),
            ),

            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              child: GridView.count(
                shrinkWrap: true,
                crossAxisCount: 3,
                childAspectRatio: 1.2,
                crossAxisSpacing: 12,
                mainAxisSpacing: 12,
                physics: const NeverScrollableScrollPhysics(),
                children: [
                  _DashboardCard(
                    icon: Icons.map_outlined,
                    label: "Map My Farm",
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (_) => const MapMyFarm()),
                      );
                    },
                  ),
                  _DashboardCard(
                    icon: Icons.fact_check_outlined,
                    label: "Carbon Credits MRV",
                    onTap: () {
                      Navigator.push(context, MaterialPageRoute(builder: (_) => const CarbonCalculatorScreen()));
                    },
                  ),
                  _DashboardCard(
                    icon: Icons.shopping_cart_outlined,
                    label: "Marketplace",
                    onTap: () {
                      Navigator.push(context, MaterialPageRoute(builder: (_) => const HomeScreen()));
                    },
                  ),
                  _DashboardCard(
                    icon: Icons.cloud_outlined,
                    label: "Weather",
                    onTap: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => const WeatherScreen()),
                      );
                    },
                  ),
                  _DashboardCard(
                    icon: Icons.auto_awesome_outlined,
                    label: "AI Analysis",
                    onTap: () {
                      Navigator.of(context).push(MaterialPageRoute(builder: (_) => const AIAnalysisCard()));
                    },
                  ),
                  const _DashboardCard(
                    icon: Icons.health_and_safety_outlined,
                    label: "NutriCheck",
                  ),
                ],
              ),
            ),

            const SizedBox(height: 16),

            // ---- Banner ----
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 16),
              height: 60,
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(12),
              ),
              alignment: Alignment.center,
              child: const Text(
                "माटी का रखवाला किसान नेता 2025",
                style: TextStyle(
                    color: Colors.black87,
                    fontWeight: FontWeight.w500,
                    fontSize: 16),
              ),
            ),

            const SizedBox(height: 16),

            // ---- Stores Section ----
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text("Stores near you",
                      style: Theme.of(context)
                          .textTheme
                          .titleMedium
                          ?.copyWith(fontWeight: FontWeight.bold)),
                  TextButton(onPressed: () {}, child: const Text("View all")),
                ],
              ),
            ),

            const StoreCard(
              name: "WARE TRADING COMPANY",
              distance: "12 km away",
              products: "2 products",
            ),
          ],
        ),
      ),

      // ---- Bottom Navigation ----
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.green,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: "Home"),
          BottomNavigationBarItem(icon: Icon(Icons.map), label: "My farm"),
          BottomNavigationBarItem(icon: Icon(Icons.store), label: "Store"),
          BottomNavigationBarItem(icon: Icon(Icons.article), label: "News"),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: "Account"),
        ],
        onTap: (idx) {
          if (idx == 1) {
            Navigator.of(context)
                .push(MaterialPageRoute(builder: (_) => const MyFarmScreen()));
          }
        },
      ),
    );
  }
}

// ---------- Reusable Components ----------

class _DashboardCard extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback? onTap;

  const _DashboardCard({
    required this.icon,
    required this.label,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.green.shade50,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: Colors.green, size: 30),
            const SizedBox(height: 8),
            Text(label,
                textAlign: TextAlign.center,
                style:
                    const TextStyle(fontSize: 13, fontWeight: FontWeight.w500)),
          ],
        ),
      ),
    );
  }
}

class _CarbonOption extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback onTap;

  const _CarbonOption(
      {required this.icon, required this.label, required this.onTap});

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.green),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: [
            Icon(icon, color: Colors.green),
            const SizedBox(width: 10),
            Text(label,
                style:
                    const TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
          ],
        ),
      ),
    );
  }
}

class StoreCard extends StatelessWidget {
  final String name;
  final String distance;
  final String products;

  const StoreCard({
    super.key,
    required this.name,
    required this.distance,
    required this.products,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        leading: const CircleAvatar(
          radius: 24,
          backgroundColor: Color(0xFFE8F5E9),
          child: Icon(Icons.store_outlined, color: Colors.green),
        ),
        title: Text(name,
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14)),
        subtitle: Text("Store pickup • $distance\n$products",
            style: const TextStyle(fontSize: 12, color: Colors.black54)),
      ),
    );
  }
}
